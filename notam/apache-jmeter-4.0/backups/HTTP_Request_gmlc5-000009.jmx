<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">${__P(host,127.0.0.1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">${__P(port,8080)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="logprefix" elementType="Argument">
            <stringProp name="Argument.name">logprefix</stringProp>
            <stringProp name="Argument.value">${__P(logprefix,debug)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path" elementType="Argument">
            <stringProp name="Argument.name">path</stringProp>
            <stringProp name="Argument.value">${__P(path,/var/log)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="service" elementType="Argument">
            <stringProp name="Argument.name">service</stringProp>
            <stringProp name="Argument.value">${__P(service,null)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="threads" elementType="Argument">
            <stringProp name="Argument.name">threads</stringProp>
            <stringProp name="Argument.value">${__P(threads,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="logintime" elementType="Argument">
            <stringProp name="Argument.name">logintime</stringProp>
            <stringProp name="Argument.value">${__P(logintime,20)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testtime" elementType="Argument">
            <stringProp name="Argument.name">testtime</stringProp>
            <stringProp name="Argument.value">${__P(testtime,30)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">10.97.51.65</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">8008</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="logprefix" elementType="Argument">
            <stringProp name="Argument.name">logprefix</stringProp>
            <stringProp name="Argument.value">debug</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="service" elementType="Argument">
            <stringProp name="Argument.name">service</stringProp>
            <stringProp name="Argument.value">lbs_isalive</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path" elementType="Argument">
            <stringProp name="Argument.name">path</stringProp>
            <stringProp name="Argument.value">/home/core/tests/nip-test-lbs2coord/tests/report</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">10.99.112.97</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">8086</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="logprefix" elementType="Argument">
            <stringProp name="Argument.name">logprefix</stringProp>
            <stringProp name="Argument.value">gmlc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path" elementType="Argument">
            <stringProp name="Argument.name">path</stringProp>
            <stringProp name="Argument.value">/var/log</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="service" elementType="Argument">
            <stringProp name="Argument.name">service</stringProp>
            <stringProp name="Argument.value">gmlc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="threads" elementType="Argument">
            <stringProp name="Argument.name">threads</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="logintime" elementType="Argument">
            <stringProp name="Argument.name">logintime</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testtime" elementType="Argument">
            <stringProp name="Argument.name">testtime</stringProp>
            <stringProp name="Argument.value">1000000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hexnum" elementType="Argument">
            <stringProp name="Argument.name">hexnum</stringProp>
            <stringProp name="Argument.value">6AE84F932403</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group slis 3" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <longProp name="ThreadGroup.start_time">1504535466000</longProp>
        <longProp name="ThreadGroup.end_time">1504535466000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${testtime}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
          <stringProp name="CounterConfig.start">7990000000</stringProp>
          <stringProp name="CounterConfig.end">7999999999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">num</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
          <stringProp name="CounterConfig.start">117546000000002</stringProp>
          <stringProp name="CounterConfig.end">999999999999999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">num</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">79163079991</stringProp>
          <stringProp name="CounterConfig.end">79163079999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">num</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import org.apache.commons.codec.binary; 
//import java.util.zip.CRC16;

private static short sunCRC16( byte[] ba )
        {
        // create a new CRC-calculating object
        final CRC16 crc = new CRC16();
        // loop, calculating CRC for each byte of the string
        // There is no CRC16.update(byte[]) method.
        for ( byte b : ba )
            {
            crc.update( b );
            }
        // note use crc.value, not crc.getValue()
        return ( short ) crc.value;
        }

public static byte[] hexStringToByteArray(String s) {
    int len = s.length();
    byte[] data = new byte[len / 2];
    for (int i = 0; i &lt; len; i += 2) {
        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) &lt;&lt; 4)
                             + Character.digit(s.charAt(i+1), 16));
    }
    return data;
}

public byte[] hex2ByteArray( String hexString ) {
    String hexVal = &quot;0123456789ABCDEF&quot;;
    byte[] out = new byte[hexString.length() / 2];

    int n = hexString.length();

    for( int i = 0; i &lt; n; i += 2 ) {
        //make a bit representation in an int of the hex value 
        int hn = hexVal.indexOf( hexString.charAt( i ) );
        int ln = hexVal.indexOf( hexString.charAt( i + 1 ) );

        //now just shift the high order nibble and add them together
        out[i/2] = (byte)( ( hn &lt;&lt; 4 ) | ln );
    }

    return out;
}

public static String dec2Hex(int num)
{
    String hex = &quot;&quot;;

    while (num != 0)
    {
        if (num % 16 &lt; 10)
            hex = Integer.toString(num % 16) + hex;
        else
            hex = (char)((num % 16)+55) + hex;
        num = num / 16;
    }

    return hex;
}

public void (){
byte s[] = {
                0x00, 0x00, 0x6a, (byte)0xe8, 0x4f, (byte)0x93,
                0x24, 0x02, 0x01, 0x00, 0x01, 0x5c, 0x52, (byte)0xc4,
                0x5f, 0x00, 0x00, 0x16, 0x6a, (byte)0xe2, 0x35, 0x21,
                0x25, 0x69, (byte)0xa6, (byte)0x80, 0x07, 0x4c, 0x04, 0x07,
                0x00, 0x00, 0x24, 0x07, 0x00, 0x00, 0x00, 0x00 };

        int sasd = s.length;
        foo(s, s.length);
    }

    public void foo(byte[] arr, int size){

        long polynomial = 0x8408;
        long CRC = 0;

        for (byte b : arr)
        {
            CRC ^= b &amp; 0xff;
            for (int i = 8; i != 0; i--)
            {
                if ((CRC &amp; 0x0001) != 0)
                {
                    CRC = (CRC &gt;&gt; 1) ^ polynomial;
                }
                else
                {
                    CRC &gt;&gt;= 1;
                }
            }
        }

        System.out.println(Long.toHexString(CRC));
    }

public String crc16_eq(byte[] arr) {
//        byte[] arr = pucData.getBytes();
        long polynomial = 0x8408;
        long CRC = 0;

        for (byte b : arr)
        {
            CRC ^= b;
            for (int i = 8; i != 0; i--)
            {
                if ((CRC &amp; 0x0001) != 0)
                {
                    CRC = (CRC &gt;&gt; 1) ^ polynomial;
                }
                else
                {
                    CRC &gt;&gt;= 1;
                }
            }
        }
        log.info(CRC.toString());
		return Long.toHexString(CRC);
    }

//String hexString = vars.get(&quot;num&quot;); 
String hexString = &quot;00006AE84F932402&quot;;
String bytes =  hexString + &quot;0100015c52c78a0000166ae235212569a680074c04070000240700000000&quot;;
log.info(bytes);
//String bytes2 =  &quot;0100015c52c78a0000166ae235212569a680074c04070000240700000000&quot;;

String bytes3 = &quot;67&quot;;
byte[] bt2 =  hex2ByteArray(bytes3);
log.info(&quot;67: &quot; + crc16_eq(bt2).toString());

log.info(&quot;bytes: &quot; + crc16_eq(bytes.getBytes()).toString());


//byte[] bt2 = new BigInteger(&quot;67&quot;, 16).toByteArray();
//byte[] bt2 =  hex2ByteArray(bytes3);
//byte[] bt = hexStringToByteArray(bytes2);

//log.info(sunCRC16(bytes3.getBytes()).toString());
//log.info(sunCRC16(bt2).toString());
//log.info(sunCRC16(bt).toString());
	
//for ( byte b : bt2)
//{
//crc.update( b );
//}

//crc.value &amp;= 0xffff;

//String crcres = Integer.toHexString(crc.value);
String bytes_full = &quot;0026&quot; + bytes + crc16_eq(bytes.getBytes()).toString();

//log.info( &quot;crc.value &quot; + crc.value);
//log.info( &quot;bytes &quot; + bytes_full);
//vars.put(&quot;bytes&quot;,bytes_full); 

//String hexString = vars.get(&quot;num&quot;); 

//String hexString = Hex.encodeHexString(hexString.getBytes(&quot;UTF-8&quot;));

//String t = hex(vars.get(&quot;num&quot;).getBytes(&quot;UTF-8&quot;))
//String hexString = &quot;0x6AE84F932402&quot;
//log.info(&quot;Hello&quot;);
//CRC16 crc = new CRC16();
//cnt = 1
//crc.update(cnt);

//log.info(crc.getValue());

//String t = new Sring();
//Hex.encodeHex(hexString.toCharArray()).toString()
//byte[] bytes = Hex.encodeHex(hexString.toCharArray()); // decode it from hex
//try
//{
//	vars.put(&quot;hexnum&quot;,	org.apache.commons.codec.binary.Hex.encodeHex(hexString.toCharArray()).toString() )
	//byte[] bytes = Hex.encodeHex(hexString.toCharArray()); // decode it from hex
	//	vars.put(&quot;hexnum&quot;, (new String(bytes, &quot;UTF-8&quot;))); // save result to a new variable called &quot;myHexString&quot;
//}
//catch(Exception e)
//{
//    log.info(&quot;Cannot parse &quot; + hexString + &quot; as hex e: &quot; + e);
//}


//String f = Integer.toHexString(vars.get(&quot;num&quot;)) 
vars.put(&quot;bytes&quot;, bytes_full);
//log.warn(vars.get(&quot;num&quot;));
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
          <stringProp name="SwitchController.value">${service}</stringProp>
        </SwitchController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="gmlc" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">gmlcgwuser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="syncmode" elementType="Argument">
                  <stringProp name="Argument.name">syncmode</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request 3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;sender&quot;:&quot;nip-sodmtd-server&quot;,&#xd;
   &quot;profile&quot;:&quot;poisk&quot;,&#xd;
   &quot;subscriberId&quot;:&quot;msisdn+${num}&quot;,&#xd;
   &quot;priority&quot;:3,&#xd;
   &quot;age&quot;:60,&#xd;
   &quot;sources&quot;:[&#xd;
      &quot;locations&quot;&#xd;
   ],&#xd;
   &quot;inputs&quot;:[&#xd;
      8192,&#xd;
      8193,&#xd;
      8194,&#xd;
      8195,&#xd;
      12432,&#xd;
      12433,&#xd;
      12434,&#xd;
      16000,&#xd;
      16001,&#xd;
      16002,&#xd;
      16384,&#xd;
      16640&#xd;
   ],&#xd;
   &quot;infolevel&quot;:5121,&#xd;
   &quot;lang&quot;:&quot;en&quot;,&#xd;
   &quot;gmlcparam&quot;:{&#xd;
      &quot;syncmode&quot;:2,&#xd;
      &quot;loctype&quot;:null,&#xd;
      &quot;hor_acc&quot;:null,&#xd;
      &quot;hor_acc_qos_class&quot;:null&#xd;
   }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/gmlcgw/rest/v0/mlp32/slis</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49588">202</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
			&quot;sender&quot;: &quot;test1&quot;,&#xd;
			&quot;profile&quot;: &quot;poisk&quot;,&#xd;
			&quot;subscriberId&quot;: &quot;msisdn+${num}&quot;,&#xd;
			&quot;priority&quot;: 0,&#xd;
			&quot;age&quot;: 61,&#xd;
			&quot;sources&quot;: [ &quot;locations&quot;, &quot;cellid&quot; ],&#xd;
			&quot;inputs&quot;: [ 12432 ],&#xd;
			&quot;infolevel&quot;: 8191,&#xd;
			&quot;lang&quot;: &quot;en&quot;,&#xd;
			&quot;gmlcparam&quot;: { &quot;syncmode&quot;: ${syncmode}, &quot;loctype&quot;: 0, &quot;hor_acc&quot;: 100, &quot;hor_acc_qos_class&quot;: 1 }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/gmlcgw/rest/v0/mlp32/slis</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49588">202</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="gmlc_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isalive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="lbs" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">lbs2coorduser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;profile&quot;:&quot;poisk&quot;,&#xd;
   &quot;sender&quot;:&quot;sender&quot;,&#xd;
   &quot;translator&quot;:1,&#xd;
   &quot;inputs&quot;:[&#xd;
      {&#xd;
         &quot;input&quot;:16000,&#xd;
         &quot;value&quot;:{&#xd;
				&quot;cellid&quot;: 42085, &#xd;
				&quot;lac&quot;: 6105, &#xd;
				&quot;mcc&quot;: 250, &#xd;
				&quot;mnc&quot;: 1, &#xd;
				&quot;net_type&quot;: 2&#xd;
			}&#xd;
      }&#xd;
   ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/lbs2coordsvc/rest/v0/lbs/one</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="lbs_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">lbs2coorduser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isAlive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="mnp" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">mnpsvcuser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request list" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;sender&quot;: &quot;as faw&quot;,&#xd;
        &quot;profile&quot;: &quot;poisk&quot;,&#xd;
        &quot;msisdn&quot;: [&quot;${num}01&quot;,&quot;${num}02&quot;,&quot;${num}03&quot;,&quot;${num}04&quot;,&quot;${num}05&quot;,&quot;${num}06&quot;,&quot;${num}07&quot;,&quot;${num}08&quot;,&quot;${num}09&quot;,&quot;${num}10&quot;,&quot;${num}11&quot;,&quot;${num}12&quot;,&quot;${num}13&quot;,&quot;${num}14&quot;,&quot;${num}15&quot;,&quot;${num}16&quot;,&quot;${num}17&quot;,&quot;${num}18&quot;,&quot;${num}19&quot;,&quot;${num}20&quot;],&#xd;
        &quot;lang&quot;: &quot;en&quot;,&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">9003</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/mnpsvc/rest/v0/msisdn/list</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request one" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sender" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">asdf</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sender</stringProp>
                  </elementProp>
                  <elementProp name="profile" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">poisk</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">profile</stringProp>
                  </elementProp>
                  <elementProp name="msisdn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${num}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">msisdn</stringProp>
                  </elementProp>
                  <elementProp name="lang" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">en</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">lang</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/mnpsvc/rest/v0/msisdn/one</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="false">
              <stringProp name="dataSource">bdpn</stringProp>
              <stringProp name="query">select * from get_info_one(&apos;${num}01&apos;,&apos;en&apos;)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Postgres" enabled="true">
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="dataSource">bdpn</stringProp>
                <stringProp name="dbUrl">jdbc:postgresql://${host}:6543/mnp?autoReconnect=true</stringProp>
                <stringProp name="driver">org.postgresql.Driver</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="password">hahaha</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <stringProp name="username">mnp_bash</stringProp>
              </JDBCDataSource>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="mnp_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request one" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isalive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="obu_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request one" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isAlive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="obuts_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="obuts" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler" enabled="false">
              <stringProp name="TCPSampler.classname">BinaryTCPClientImpl</stringProp>
              <stringProp name="TCPSampler.server">${host}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">false</boolProp>
              <stringProp name="TCPSampler.port">${port}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout">10000</stringProp>
              <stringProp name="TCPSampler.ctimeout">10000</stringProp>
              <stringProp name="TCPSampler.request">00260000${hexnum}0100015c52c78a0000166ae235212569a680074c040700002407000000006782</stringProp>
              <boolProp name="TCPSampler.closeConnection">false</boolProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="474552740">0002640113bc</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable"></stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler" enabled="true">
              <stringProp name="TCPSampler.classname">BinaryTCPClientImpl</stringProp>
              <stringProp name="TCPSampler.server">${host}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">false</boolProp>
              <stringProp name="TCPSampler.port">${port}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout">10000</stringProp>
              <stringProp name="TCPSampler.ctimeout">10000</stringProp>
              <stringProp name="TCPSampler.request">${bytes}</stringProp>
              <boolProp name="TCPSampler.closeConnection">false</boolProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="474552740">0002640113bc</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable"></stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="kafka" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java Request" enabled="true">
              <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="bootstrap.servers" elementType="Argument">
                    <stringProp name="Argument.name">bootstrap.servers</stringProp>
                    <stringProp name="Argument.value">10.97.51.36:9092</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="zookeeper.servers" elementType="Argument">
                    <stringProp name="Argument.name">zookeeper.servers</stringProp>
                    <stringProp name="Argument.value">&lt;Zookeeper List&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="kafka.topic.name" elementType="Argument">
                    <stringProp name="Argument.name">kafka.topic.name</stringProp>
                    <stringProp name="Argument.value">testing</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="key.serializer" elementType="Argument">
                    <stringProp name="Argument.name">key.serializer</stringProp>
                    <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="value.serializer" elementType="Argument">
                    <stringProp name="Argument.name">value.serializer</stringProp>
                    <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="compression.type" elementType="Argument">
                    <stringProp name="Argument.name">compression.type</stringProp>
                    <stringProp name="Argument.value">none</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="batch.size" elementType="Argument">
                    <stringProp name="Argument.name">batch.size</stringProp>
                    <stringProp name="Argument.value">16384</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="linger.ms" elementType="Argument">
                    <stringProp name="Argument.name">linger.ms</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="buffer.memory" elementType="Argument">
                    <stringProp name="Argument.name">buffer.memory</stringProp>
                    <stringProp name="Argument.value">33554432</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="acks" elementType="Argument">
                    <stringProp name="Argument.name">acks</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="send.buffer.bytes" elementType="Argument">
                    <stringProp name="Argument.name">send.buffer.bytes</stringProp>
                    <stringProp name="Argument.value">131072</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="receive.buffer.bytes" elementType="Argument">
                    <stringProp name="Argument.name">receive.buffer.bytes</stringProp>
                    <stringProp name="Argument.value">32768</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="security.protocol" elementType="Argument">
                    <stringProp name="Argument.name">security.protocol</stringProp>
                    <stringProp name="Argument.value">PLAINTEXT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="message.placeholder.key" elementType="Argument">
                    <stringProp name="Argument.name">message.placeholder.key</stringProp>
                    <stringProp name="Argument.value">MESSAGE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="kerberos.auth.enabled" elementType="Argument">
                    <stringProp name="Argument.name">kerberos.auth.enabled</stringProp>
                    <stringProp name="Argument.value">NO</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="java.security.auth.login.config" elementType="Argument">
                    <stringProp name="Argument.name">java.security.auth.login.config</stringProp>
                    <stringProp name="Argument.value">&lt;JAAS File Location&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="java.security.krb5.conf" elementType="Argument">
                    <stringProp name="Argument.name">java.security.krb5.conf</stringProp>
                    <stringProp name="Argument.value">&lt;krb5.conf location&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sasl.kerberos.service.name" elementType="Argument">
                    <stringProp name="Argument.name">sasl.kerberos.service.name</stringProp>
                    <stringProp name="Argument.value">kafka</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="classname">com.gslab.pepper.sampler.PepperBoxKafkaSampler</stringProp>
            </JavaSampler>
            <hashTree/>
            <com.gslab.pepper.config.plaintext.PlainTextConfigElement guiclass="TestBeanGUI" testclass="com.gslab.pepper.config.plaintext.PlainTextConfigElement" testname="Pepper-Box PlainText Config" enabled="true">
              <stringProp name="jsonSchema">{
	&quot;messageId&quot;:{{SEQUENCE(&quot;messageId&quot;, 1, 1)}},
	&quot;messageBody&quot;:&quot;{{RANDOM_ALPHA_NUMERIC(&quot;abcedefghijklmnopqrwxyzABCDEFGHIJKLMNOPQRWXYZ&quot;, 100)}}&quot;,
	&quot;messageCategory&quot;:&quot;{{RANDOM_STRING(&quot;Finance&quot;, &quot;Insurance&quot;, &quot;Healthcare&quot;, &quot;Shares&quot;)}}&quot;,
	&quot;messageStatus&quot;:&quot;{{RANDOM_STRING(&quot;Accepted&quot;,&quot;Pending&quot;,&quot;Processing&quot;,&quot;Rejected&quot;)}}&quot;,
	&quot;messageTime&quot;:{{TIMESTAMP()}}
}</stringProp>
              <stringProp name="placeHolder">MESSAGE</stringProp>
            </com.gslab.pepper.config.plaintext.PlainTextConfigElement>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group slis 3 2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <longProp name="ThreadGroup.start_time">1504535466000</longProp>
        <longProp name="ThreadGroup.end_time">1504535466000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${testtime}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
          <stringProp name="CounterConfig.start">7990000000</stringProp>
          <stringProp name="CounterConfig.end">7999999999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">num</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
          <stringProp name="CounterConfig.start">117546000000002</stringProp>
          <stringProp name="CounterConfig.end">999999999999999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">num</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">79163079991</stringProp>
          <stringProp name="CounterConfig.end">79163079999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">num</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import org.apache.commons.codec.binary; 
//import java.util.zip.CRC16;

private static short sunCRC16( byte[] ba )
        {
        // create a new CRC-calculating object
        final CRC16 crc = new CRC16();
        // loop, calculating CRC for each byte of the string
        // There is no CRC16.update(byte[]) method.
        for ( byte b : ba )
            {
            crc.update( b );
            }
        // note use crc.value, not crc.getValue()
        return ( short ) crc.value;
        }

public static byte[] hexStringToByteArray(String s) {
    int len = s.length();
    byte[] data = new byte[len / 2];
    for (int i = 0; i &lt; len; i += 2) {
        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) &lt;&lt; 4)
                             + Character.digit(s.charAt(i+1), 16));
    }
    return data;
}

public byte[] hex2ByteArray( String hexString ) {
    String hexVal = &quot;0123456789ABCDEF&quot;;
    byte[] out = new byte[hexString.length() / 2];

    int n = hexString.length();

    for( int i = 0; i &lt; n; i += 2 ) {
        //make a bit representation in an int of the hex value 
        int hn = hexVal.indexOf( hexString.charAt( i ) );
        int ln = hexVal.indexOf( hexString.charAt( i + 1 ) );

        //now just shift the high order nibble and add them together
        out[i/2] = (byte)( ( hn &lt;&lt; 4 ) | ln );
    }

    return out;
}

public static String dec2Hex(int num)
{
    String hex = &quot;&quot;;

    while (num != 0)
    {
        if (num % 16 &lt; 10)
            hex = Integer.toString(num % 16) + hex;
        else
            hex = (char)((num % 16)+55) + hex;
        num = num / 16;
    }

    return hex;
}

public void (){
byte s[] = {
                0x00, 0x00, 0x6a, (byte)0xe8, 0x4f, (byte)0x93,
                0x24, 0x02, 0x01, 0x00, 0x01, 0x5c, 0x52, (byte)0xc4,
                0x5f, 0x00, 0x00, 0x16, 0x6a, (byte)0xe2, 0x35, 0x21,
                0x25, 0x69, (byte)0xa6, (byte)0x80, 0x07, 0x4c, 0x04, 0x07,
                0x00, 0x00, 0x24, 0x07, 0x00, 0x00, 0x00, 0x00 };

        int sasd = s.length;
        foo(s, s.length);
    }

    public void foo(byte[] arr, int size){

        long polynomial = 0x8408;
        long CRC = 0;

        for (byte b : arr)
        {
            CRC ^= b &amp; 0xff;
            for (int i = 8; i != 0; i--)
            {
                if ((CRC &amp; 0x0001) != 0)
                {
                    CRC = (CRC &gt;&gt; 1) ^ polynomial;
                }
                else
                {
                    CRC &gt;&gt;= 1;
                }
            }
        }

        System.out.println(Long.toHexString(CRC));
    }

public String crc16_eq(byte[] arr) {
//        byte[] arr = pucData.getBytes();
        long polynomial = 0x8408;
        long CRC = 0;

        for (byte b : arr)
        {
            CRC ^= b;
            for (int i = 8; i != 0; i--)
            {
                if ((CRC &amp; 0x0001) != 0)
                {
                    CRC = (CRC &gt;&gt; 1) ^ polynomial;
                }
                else
                {
                    CRC &gt;&gt;= 1;
                }
            }
        }
        log.info(CRC.toString());
		return Long.toHexString(CRC);
    }

//String hexString = vars.get(&quot;num&quot;); 
String hexString = &quot;00006AE84F932402&quot;;
String bytes =  hexString + &quot;0100015c52c78a0000166ae235212569a680074c04070000240700000000&quot;;
log.info(bytes);
//String bytes2 =  &quot;0100015c52c78a0000166ae235212569a680074c04070000240700000000&quot;;

String bytes3 = &quot;67&quot;;
byte[] bt2 =  hex2ByteArray(bytes3);
log.info(&quot;67: &quot; + crc16_eq(bt2).toString());

log.info(&quot;bytes: &quot; + crc16_eq(bytes.getBytes()).toString());


//byte[] bt2 = new BigInteger(&quot;67&quot;, 16).toByteArray();
//byte[] bt2 =  hex2ByteArray(bytes3);
//byte[] bt = hexStringToByteArray(bytes2);

//log.info(sunCRC16(bytes3.getBytes()).toString());
//log.info(sunCRC16(bt2).toString());
//log.info(sunCRC16(bt).toString());
	
//for ( byte b : bt2)
//{
//crc.update( b );
//}

//crc.value &amp;= 0xffff;

//String crcres = Integer.toHexString(crc.value);
String bytes_full = &quot;0026&quot; + bytes + crc16_eq(bytes.getBytes()).toString();

//log.info( &quot;crc.value &quot; + crc.value);
//log.info( &quot;bytes &quot; + bytes_full);
//vars.put(&quot;bytes&quot;,bytes_full); 

//String hexString = vars.get(&quot;num&quot;); 

//String hexString = Hex.encodeHexString(hexString.getBytes(&quot;UTF-8&quot;));

//String t = hex(vars.get(&quot;num&quot;).getBytes(&quot;UTF-8&quot;))
//String hexString = &quot;0x6AE84F932402&quot;
//log.info(&quot;Hello&quot;);
//CRC16 crc = new CRC16();
//cnt = 1
//crc.update(cnt);

//log.info(crc.getValue());

//String t = new Sring();
//Hex.encodeHex(hexString.toCharArray()).toString()
//byte[] bytes = Hex.encodeHex(hexString.toCharArray()); // decode it from hex
//try
//{
//	vars.put(&quot;hexnum&quot;,	org.apache.commons.codec.binary.Hex.encodeHex(hexString.toCharArray()).toString() )
	//byte[] bytes = Hex.encodeHex(hexString.toCharArray()); // decode it from hex
	//	vars.put(&quot;hexnum&quot;, (new String(bytes, &quot;UTF-8&quot;))); // save result to a new variable called &quot;myHexString&quot;
//}
//catch(Exception e)
//{
//    log.info(&quot;Cannot parse &quot; + hexString + &quot; as hex e: &quot; + e);
//}


//String f = Integer.toHexString(vars.get(&quot;num&quot;)) 
vars.put(&quot;bytes&quot;, bytes_full);
//log.warn(vars.get(&quot;num&quot;));
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
          <stringProp name="SwitchController.value">${service}</stringProp>
        </SwitchController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="gmlc" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">gmlcgwuser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="syncmode" elementType="Argument">
                  <stringProp name="Argument.name">syncmode</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request 3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;sender&quot;:&quot;nip-sodmtd-server&quot;,&#xd;
   &quot;profile&quot;:&quot;poisk&quot;,&#xd;
   &quot;subscriberId&quot;:&quot;msisdn+${num}&quot;,&#xd;
   &quot;priority&quot;:3,&#xd;
   &quot;age&quot;:60,&#xd;
   &quot;sources&quot;:[&#xd;
      &quot;locations&quot;&#xd;
   ],&#xd;
   &quot;inputs&quot;:[&#xd;
      8192,&#xd;
      8193,&#xd;
      8194,&#xd;
      8195,&#xd;
      12432,&#xd;
      12433,&#xd;
      12434,&#xd;
      16000,&#xd;
      16001,&#xd;
      16002,&#xd;
      16384,&#xd;
      16640&#xd;
   ],&#xd;
   &quot;infolevel&quot;:5121,&#xd;
   &quot;lang&quot;:&quot;en&quot;,&#xd;
   &quot;gmlcparam&quot;:{&#xd;
      &quot;syncmode&quot;:2,&#xd;
      &quot;loctype&quot;:null,&#xd;
      &quot;hor_acc&quot;:null,&#xd;
      &quot;hor_acc_qos_class&quot;:null&#xd;
   }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/gmlcgw/rest/v0/mlp32/slis</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49588">202</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
			&quot;sender&quot;: &quot;test1&quot;,&#xd;
			&quot;profile&quot;: &quot;poisk&quot;,&#xd;
			&quot;subscriberId&quot;: &quot;msisdn+${num}&quot;,&#xd;
			&quot;priority&quot;: 0,&#xd;
			&quot;age&quot;: 61,&#xd;
			&quot;sources&quot;: [ &quot;locations&quot;, &quot;cellid&quot; ],&#xd;
			&quot;inputs&quot;: [ 12432 ],&#xd;
			&quot;infolevel&quot;: 8191,&#xd;
			&quot;lang&quot;: &quot;en&quot;,&#xd;
			&quot;gmlcparam&quot;: { &quot;syncmode&quot;: ${syncmode}, &quot;loctype&quot;: 0, &quot;hor_acc&quot;: 100, &quot;hor_acc_qos_class&quot;: 1 }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/gmlcgw/rest/v0/mlp32/slis</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49588">202</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="gmlc_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isalive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="lbs" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">lbs2coorduser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;profile&quot;:&quot;poisk&quot;,&#xd;
   &quot;sender&quot;:&quot;sender&quot;,&#xd;
   &quot;translator&quot;:1,&#xd;
   &quot;inputs&quot;:[&#xd;
      {&#xd;
         &quot;input&quot;:16000,&#xd;
         &quot;value&quot;:{&#xd;
				&quot;cellid&quot;: 42085, &#xd;
				&quot;lac&quot;: 6105, &#xd;
				&quot;mcc&quot;: 250, &#xd;
				&quot;mnc&quot;: 1, &#xd;
				&quot;net_type&quot;: 2&#xd;
			}&#xd;
      }&#xd;
   ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/lbs2coordsvc/rest/v0/lbs/one</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="lbs_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">lbs2coorduser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isAlive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="mnp" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">mnpsvcuser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request list" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;sender&quot;: &quot;as faw&quot;,&#xd;
        &quot;profile&quot;: &quot;poisk&quot;,&#xd;
        &quot;msisdn&quot;: [&quot;${num}01&quot;,&quot;${num}02&quot;,&quot;${num}03&quot;,&quot;${num}04&quot;,&quot;${num}05&quot;,&quot;${num}06&quot;,&quot;${num}07&quot;,&quot;${num}08&quot;,&quot;${num}09&quot;,&quot;${num}10&quot;,&quot;${num}11&quot;,&quot;${num}12&quot;,&quot;${num}13&quot;,&quot;${num}14&quot;,&quot;${num}15&quot;,&quot;${num}16&quot;,&quot;${num}17&quot;,&quot;${num}18&quot;,&quot;${num}19&quot;,&quot;${num}20&quot;],&#xd;
        &quot;lang&quot;: &quot;en&quot;,&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">9003</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/mnpsvc/rest/v0/msisdn/list</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request one" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sender" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">asdf</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sender</stringProp>
                  </elementProp>
                  <elementProp name="profile" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">poisk</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">profile</stringProp>
                  </elementProp>
                  <elementProp name="msisdn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${num}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">msisdn</stringProp>
                  </elementProp>
                  <elementProp name="lang" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">en</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">lang</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/mnpsvc/rest/v0/msisdn/one</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="false">
              <stringProp name="dataSource">bdpn</stringProp>
              <stringProp name="query">select * from get_info_one(&apos;${num}01&apos;,&apos;en&apos;)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Postgres" enabled="true">
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="dataSource">bdpn</stringProp>
                <stringProp name="dbUrl">jdbc:postgresql://${host}:6543/mnp?autoReconnect=true</stringProp>
                <stringProp name="driver">org.postgresql.Driver</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="password">hahaha</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <stringProp name="username">mnp_bash</stringProp>
              </JDBCDataSource>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="mnp_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request one" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isalive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="obu_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request one" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isAlive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="obuts_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="obuts" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler" enabled="false">
              <stringProp name="TCPSampler.classname">BinaryTCPClientImpl</stringProp>
              <stringProp name="TCPSampler.server">${host}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">false</boolProp>
              <stringProp name="TCPSampler.port">${port}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout">10000</stringProp>
              <stringProp name="TCPSampler.ctimeout">10000</stringProp>
              <stringProp name="TCPSampler.request">00260000${hexnum}0100015c52c78a0000166ae235212569a680074c040700002407000000006782</stringProp>
              <boolProp name="TCPSampler.closeConnection">false</boolProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="474552740">0002640113bc</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable"></stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler" enabled="true">
              <stringProp name="TCPSampler.classname">BinaryTCPClientImpl</stringProp>
              <stringProp name="TCPSampler.server">${host}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">false</boolProp>
              <stringProp name="TCPSampler.port">${port}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout">10000</stringProp>
              <stringProp name="TCPSampler.ctimeout">10000</stringProp>
              <stringProp name="TCPSampler.request">${bytes}</stringProp>
              <boolProp name="TCPSampler.closeConnection">false</boolProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="474552740">0002640113bc</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable"></stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="kafka" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java Request" enabled="true">
              <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="bootstrap.servers" elementType="Argument">
                    <stringProp name="Argument.name">bootstrap.servers</stringProp>
                    <stringProp name="Argument.value">10.97.51.36:9092</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="zookeeper.servers" elementType="Argument">
                    <stringProp name="Argument.name">zookeeper.servers</stringProp>
                    <stringProp name="Argument.value">&lt;Zookeeper List&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="kafka.topic.name" elementType="Argument">
                    <stringProp name="Argument.name">kafka.topic.name</stringProp>
                    <stringProp name="Argument.value">testing</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="key.serializer" elementType="Argument">
                    <stringProp name="Argument.name">key.serializer</stringProp>
                    <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="value.serializer" elementType="Argument">
                    <stringProp name="Argument.name">value.serializer</stringProp>
                    <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="compression.type" elementType="Argument">
                    <stringProp name="Argument.name">compression.type</stringProp>
                    <stringProp name="Argument.value">none</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="batch.size" elementType="Argument">
                    <stringProp name="Argument.name">batch.size</stringProp>
                    <stringProp name="Argument.value">16384</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="linger.ms" elementType="Argument">
                    <stringProp name="Argument.name">linger.ms</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="buffer.memory" elementType="Argument">
                    <stringProp name="Argument.name">buffer.memory</stringProp>
                    <stringProp name="Argument.value">33554432</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="acks" elementType="Argument">
                    <stringProp name="Argument.name">acks</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="send.buffer.bytes" elementType="Argument">
                    <stringProp name="Argument.name">send.buffer.bytes</stringProp>
                    <stringProp name="Argument.value">131072</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="receive.buffer.bytes" elementType="Argument">
                    <stringProp name="Argument.name">receive.buffer.bytes</stringProp>
                    <stringProp name="Argument.value">32768</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="security.protocol" elementType="Argument">
                    <stringProp name="Argument.name">security.protocol</stringProp>
                    <stringProp name="Argument.value">PLAINTEXT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="message.placeholder.key" elementType="Argument">
                    <stringProp name="Argument.name">message.placeholder.key</stringProp>
                    <stringProp name="Argument.value">MESSAGE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="kerberos.auth.enabled" elementType="Argument">
                    <stringProp name="Argument.name">kerberos.auth.enabled</stringProp>
                    <stringProp name="Argument.value">NO</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="java.security.auth.login.config" elementType="Argument">
                    <stringProp name="Argument.name">java.security.auth.login.config</stringProp>
                    <stringProp name="Argument.value">&lt;JAAS File Location&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="java.security.krb5.conf" elementType="Argument">
                    <stringProp name="Argument.name">java.security.krb5.conf</stringProp>
                    <stringProp name="Argument.value">&lt;krb5.conf location&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sasl.kerberos.service.name" elementType="Argument">
                    <stringProp name="Argument.name">sasl.kerberos.service.name</stringProp>
                    <stringProp name="Argument.value">kafka</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="classname">com.gslab.pepper.sampler.PepperBoxKafkaSampler</stringProp>
            </JavaSampler>
            <hashTree/>
            <com.gslab.pepper.config.plaintext.PlainTextConfigElement guiclass="TestBeanGUI" testclass="com.gslab.pepper.config.plaintext.PlainTextConfigElement" testname="Pepper-Box PlainText Config" enabled="true">
              <stringProp name="jsonSchema">{
	&quot;messageId&quot;:{{SEQUENCE(&quot;messageId&quot;, 1, 1)}},
	&quot;messageBody&quot;:&quot;{{RANDOM_ALPHA_NUMERIC(&quot;abcedefghijklmnopqrwxyzABCDEFGHIJKLMNOPQRWXYZ&quot;, 100)}}&quot;,
	&quot;messageCategory&quot;:&quot;{{RANDOM_STRING(&quot;Finance&quot;, &quot;Insurance&quot;, &quot;Healthcare&quot;, &quot;Shares&quot;)}}&quot;,
	&quot;messageStatus&quot;:&quot;{{RANDOM_STRING(&quot;Accepted&quot;,&quot;Pending&quot;,&quot;Processing&quot;,&quot;Rejected&quot;)}}&quot;,
	&quot;messageTime&quot;:{{TIMESTAMP()}}
}</stringProp>
              <stringProp name="placeHolder">MESSAGE</stringProp>
            </com.gslab.pepper.config.plaintext.PlainTextConfigElement>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group slis 0" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">15</stringProp>
        <stringProp name="ThreadGroup.ramp_time">15</stringProp>
        <longProp name="ThreadGroup.start_time">1504535466000</longProp>
        <longProp name="ThreadGroup.end_time">1504535466000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${testtime}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
          <stringProp name="CounterConfig.start">7990000000</stringProp>
          <stringProp name="CounterConfig.end">7999999999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">num</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
          <stringProp name="CounterConfig.start">117546000000002</stringProp>
          <stringProp name="CounterConfig.end">999999999999999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">num</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">79163089901</stringProp>
          <stringProp name="CounterConfig.end">79163089999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">num</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import org.apache.commons.codec.binary; 
//import java.util.zip.CRC16;

private static short sunCRC16( byte[] ba )
        {
        // create a new CRC-calculating object
        final CRC16 crc = new CRC16();
        // loop, calculating CRC for each byte of the string
        // There is no CRC16.update(byte[]) method.
        for ( byte b : ba )
            {
            crc.update( b );
            }
        // note use crc.value, not crc.getValue()
        return ( short ) crc.value;
        }

public static byte[] hexStringToByteArray(String s) {
    int len = s.length();
    byte[] data = new byte[len / 2];
    for (int i = 0; i &lt; len; i += 2) {
        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) &lt;&lt; 4)
                             + Character.digit(s.charAt(i+1), 16));
    }
    return data;
}

public byte[] hex2ByteArray( String hexString ) {
    String hexVal = &quot;0123456789ABCDEF&quot;;
    byte[] out = new byte[hexString.length() / 2];

    int n = hexString.length();

    for( int i = 0; i &lt; n; i += 2 ) {
        //make a bit representation in an int of the hex value 
        int hn = hexVal.indexOf( hexString.charAt( i ) );
        int ln = hexVal.indexOf( hexString.charAt( i + 1 ) );

        //now just shift the high order nibble and add them together
        out[i/2] = (byte)( ( hn &lt;&lt; 4 ) | ln );
    }

    return out;
}

public static String dec2Hex(int num)
{
    String hex = &quot;&quot;;

    while (num != 0)
    {
        if (num % 16 &lt; 10)
            hex = Integer.toString(num % 16) + hex;
        else
            hex = (char)((num % 16)+55) + hex;
        num = num / 16;
    }

    return hex;
}

public void (){
byte s[] = {
                0x00, 0x00, 0x6a, (byte)0xe8, 0x4f, (byte)0x93,
                0x24, 0x02, 0x01, 0x00, 0x01, 0x5c, 0x52, (byte)0xc4,
                0x5f, 0x00, 0x00, 0x16, 0x6a, (byte)0xe2, 0x35, 0x21,
                0x25, 0x69, (byte)0xa6, (byte)0x80, 0x07, 0x4c, 0x04, 0x07,
                0x00, 0x00, 0x24, 0x07, 0x00, 0x00, 0x00, 0x00 };

        int sasd = s.length;
        foo(s, s.length);
    }

    public void foo(byte[] arr, int size){

        long polynomial = 0x8408;
        long CRC = 0;

        for (byte b : arr)
        {
            CRC ^= b &amp; 0xff;
            for (int i = 8; i != 0; i--)
            {
                if ((CRC &amp; 0x0001) != 0)
                {
                    CRC = (CRC &gt;&gt; 1) ^ polynomial;
                }
                else
                {
                    CRC &gt;&gt;= 1;
                }
            }
        }

        System.out.println(Long.toHexString(CRC));
    }

public String crc16_eq(byte[] arr) {
//        byte[] arr = pucData.getBytes();
        long polynomial = 0x8408;
        long CRC = 0;

        for (byte b : arr)
        {
            CRC ^= b;
            for (int i = 8; i != 0; i--)
            {
                if ((CRC &amp; 0x0001) != 0)
                {
                    CRC = (CRC &gt;&gt; 1) ^ polynomial;
                }
                else
                {
                    CRC &gt;&gt;= 1;
                }
            }
        }
        log.info(CRC.toString());
		return Long.toHexString(CRC);
    }

//String hexString = vars.get(&quot;num&quot;); 
String hexString = &quot;00006AE84F932402&quot;;
String bytes =  hexString + &quot;0100015c52c78a0000166ae235212569a680074c04070000240700000000&quot;;
log.info(bytes);
//String bytes2 =  &quot;0100015c52c78a0000166ae235212569a680074c04070000240700000000&quot;;

String bytes3 = &quot;67&quot;;
byte[] bt2 =  hex2ByteArray(bytes3);
log.info(&quot;67: &quot; + crc16_eq(bt2).toString());

log.info(&quot;bytes: &quot; + crc16_eq(bytes.getBytes()).toString());


//byte[] bt2 = new BigInteger(&quot;67&quot;, 16).toByteArray();
//byte[] bt2 =  hex2ByteArray(bytes3);
//byte[] bt = hexStringToByteArray(bytes2);

//log.info(sunCRC16(bytes3.getBytes()).toString());
//log.info(sunCRC16(bt2).toString());
//log.info(sunCRC16(bt).toString());
	
//for ( byte b : bt2)
//{
//crc.update( b );
//}

//crc.value &amp;= 0xffff;

//String crcres = Integer.toHexString(crc.value);
String bytes_full = &quot;0026&quot; + bytes + crc16_eq(bytes.getBytes()).toString();

//log.info( &quot;crc.value &quot; + crc.value);
//log.info( &quot;bytes &quot; + bytes_full);
//vars.put(&quot;bytes&quot;,bytes_full); 

//String hexString = vars.get(&quot;num&quot;); 

//String hexString = Hex.encodeHexString(hexString.getBytes(&quot;UTF-8&quot;));

//String t = hex(vars.get(&quot;num&quot;).getBytes(&quot;UTF-8&quot;))
//String hexString = &quot;0x6AE84F932402&quot;
//log.info(&quot;Hello&quot;);
//CRC16 crc = new CRC16();
//cnt = 1
//crc.update(cnt);

//log.info(crc.getValue());

//String t = new Sring();
//Hex.encodeHex(hexString.toCharArray()).toString()
//byte[] bytes = Hex.encodeHex(hexString.toCharArray()); // decode it from hex
//try
//{
//	vars.put(&quot;hexnum&quot;,	org.apache.commons.codec.binary.Hex.encodeHex(hexString.toCharArray()).toString() )
	//byte[] bytes = Hex.encodeHex(hexString.toCharArray()); // decode it from hex
	//	vars.put(&quot;hexnum&quot;, (new String(bytes, &quot;UTF-8&quot;))); // save result to a new variable called &quot;myHexString&quot;
//}
//catch(Exception e)
//{
//    log.info(&quot;Cannot parse &quot; + hexString + &quot; as hex e: &quot; + e);
//}


//String f = Integer.toHexString(vars.get(&quot;num&quot;)) 
vars.put(&quot;bytes&quot;, bytes_full);
//log.warn(vars.get(&quot;num&quot;));
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
          <stringProp name="SwitchController.value">${service}</stringProp>
        </SwitchController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="gmlc" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">gmlcgwuser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="syncmode" elementType="Argument">
                  <stringProp name="Argument.name">syncmode</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request 0" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;sender&quot;:&quot;nip-sodmtd-pinger&quot;,&#xd;
   &quot;profile&quot;:&quot;poisk&quot;,&#xd;
   &quot;subscriberId&quot;:&quot;msisdn+${num}&quot;,&#xd;
   &quot;priority&quot;:0,&#xd;
   &quot;age&quot;:60,&#xd;
   &quot;sources&quot;:[&#xd;
      &quot;locations&quot;&#xd;
   ],&#xd;
   &quot;inputs&quot;:[&#xd;
      8192,&#xd;
      8193,&#xd;
      8194,&#xd;
      8195,&#xd;
      12432,&#xd;
      12433,&#xd;
      12434,&#xd;
      16000,&#xd;
      16001,&#xd;
      16002,&#xd;
      16384,&#xd;
      16640&#xd;
   ],&#xd;
   &quot;infolevel&quot;:5121,&#xd;
   &quot;lang&quot;:&quot;en&quot;,&#xd;
   &quot;gmlcparam&quot;:{&#xd;
      &quot;syncmode&quot;:2,&#xd;
      &quot;loctype&quot;:null,&#xd;
      &quot;hor_acc&quot;:null,&#xd;
      &quot;hor_acc_qos_class&quot;:null&#xd;
   }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/gmlcgw/rest/v0/mlp32/slis</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49588">202</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
			&quot;sender&quot;: &quot;test1&quot;,&#xd;
			&quot;profile&quot;: &quot;poisk&quot;,&#xd;
			&quot;subscriberId&quot;: &quot;msisdn+${num}&quot;,&#xd;
			&quot;priority&quot;: 0,&#xd;
			&quot;age&quot;: 61,&#xd;
			&quot;sources&quot;: [ &quot;locations&quot;, &quot;cellid&quot; ],&#xd;
			&quot;inputs&quot;: [ 12432 ],&#xd;
			&quot;infolevel&quot;: 8191,&#xd;
			&quot;lang&quot;: &quot;en&quot;,&#xd;
			&quot;gmlcparam&quot;: { &quot;syncmode&quot;: ${syncmode}, &quot;loctype&quot;: 0, &quot;hor_acc&quot;: 100, &quot;hor_acc_qos_class&quot;: 1 }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/gmlcgw/rest/v0/mlp32/slis</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49588">202</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="gmlc_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isalive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="lbs" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">lbs2coorduser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;profile&quot;:&quot;poisk&quot;,&#xd;
   &quot;sender&quot;:&quot;sender&quot;,&#xd;
   &quot;translator&quot;:1,&#xd;
   &quot;inputs&quot;:[&#xd;
      {&#xd;
         &quot;input&quot;:16000,&#xd;
         &quot;value&quot;:{&#xd;
				&quot;cellid&quot;: 42085, &#xd;
				&quot;lac&quot;: 6105, &#xd;
				&quot;mcc&quot;: 250, &#xd;
				&quot;mnc&quot;: 1, &#xd;
				&quot;net_type&quot;: 2&#xd;
			}&#xd;
      }&#xd;
   ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/lbs2coordsvc/rest/v0/lbs/one</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="lbs_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">lbs2coorduser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isAlive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="mnp" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">mnpsvcuser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request list" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;sender&quot;: &quot;as faw&quot;,&#xd;
        &quot;profile&quot;: &quot;poisk&quot;,&#xd;
        &quot;msisdn&quot;: [&quot;${num}01&quot;,&quot;${num}02&quot;,&quot;${num}03&quot;,&quot;${num}04&quot;,&quot;${num}05&quot;,&quot;${num}06&quot;,&quot;${num}07&quot;,&quot;${num}08&quot;,&quot;${num}09&quot;,&quot;${num}10&quot;,&quot;${num}11&quot;,&quot;${num}12&quot;,&quot;${num}13&quot;,&quot;${num}14&quot;,&quot;${num}15&quot;,&quot;${num}16&quot;,&quot;${num}17&quot;,&quot;${num}18&quot;,&quot;${num}19&quot;,&quot;${num}20&quot;],&#xd;
        &quot;lang&quot;: &quot;en&quot;,&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">9003</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/mnpsvc/rest/v0/msisdn/list</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request one" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sender" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">asdf</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sender</stringProp>
                  </elementProp>
                  <elementProp name="profile" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">poisk</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">profile</stringProp>
                  </elementProp>
                  <elementProp name="msisdn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${num}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">msisdn</stringProp>
                  </elementProp>
                  <elementProp name="lang" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">en</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">lang</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/mnpsvc/rest/v0/msisdn/one</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="false">
              <stringProp name="dataSource">bdpn</stringProp>
              <stringProp name="query">select * from get_info_one(&apos;${num}01&apos;,&apos;en&apos;)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Postgres" enabled="true">
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="dataSource">bdpn</stringProp>
                <stringProp name="dbUrl">jdbc:postgresql://${host}:6543/mnp?autoReconnect=true</stringProp>
                <stringProp name="driver">org.postgresql.Driver</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="password">hahaha</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <stringProp name="username">mnp_bash</stringProp>
              </JDBCDataSource>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="mnp_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request one" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isalive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="obu_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request one" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isAlive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="obuts_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="obuts" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler" enabled="false">
              <stringProp name="TCPSampler.classname">BinaryTCPClientImpl</stringProp>
              <stringProp name="TCPSampler.server">${host}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">false</boolProp>
              <stringProp name="TCPSampler.port">${port}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout">10000</stringProp>
              <stringProp name="TCPSampler.ctimeout">10000</stringProp>
              <stringProp name="TCPSampler.request">00260000${hexnum}0100015c52c78a0000166ae235212569a680074c040700002407000000006782</stringProp>
              <boolProp name="TCPSampler.closeConnection">false</boolProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="474552740">0002640113bc</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable"></stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler" enabled="true">
              <stringProp name="TCPSampler.classname">BinaryTCPClientImpl</stringProp>
              <stringProp name="TCPSampler.server">${host}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">false</boolProp>
              <stringProp name="TCPSampler.port">${port}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout">10000</stringProp>
              <stringProp name="TCPSampler.ctimeout">10000</stringProp>
              <stringProp name="TCPSampler.request">${bytes}</stringProp>
              <boolProp name="TCPSampler.closeConnection">false</boolProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="474552740">0002640113bc</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable"></stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="kafka" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java Request" enabled="true">
              <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="bootstrap.servers" elementType="Argument">
                    <stringProp name="Argument.name">bootstrap.servers</stringProp>
                    <stringProp name="Argument.value">10.97.51.36:9092</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="zookeeper.servers" elementType="Argument">
                    <stringProp name="Argument.name">zookeeper.servers</stringProp>
                    <stringProp name="Argument.value">&lt;Zookeeper List&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="kafka.topic.name" elementType="Argument">
                    <stringProp name="Argument.name">kafka.topic.name</stringProp>
                    <stringProp name="Argument.value">testing</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="key.serializer" elementType="Argument">
                    <stringProp name="Argument.name">key.serializer</stringProp>
                    <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="value.serializer" elementType="Argument">
                    <stringProp name="Argument.name">value.serializer</stringProp>
                    <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="compression.type" elementType="Argument">
                    <stringProp name="Argument.name">compression.type</stringProp>
                    <stringProp name="Argument.value">none</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="batch.size" elementType="Argument">
                    <stringProp name="Argument.name">batch.size</stringProp>
                    <stringProp name="Argument.value">16384</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="linger.ms" elementType="Argument">
                    <stringProp name="Argument.name">linger.ms</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="buffer.memory" elementType="Argument">
                    <stringProp name="Argument.name">buffer.memory</stringProp>
                    <stringProp name="Argument.value">33554432</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="acks" elementType="Argument">
                    <stringProp name="Argument.name">acks</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="send.buffer.bytes" elementType="Argument">
                    <stringProp name="Argument.name">send.buffer.bytes</stringProp>
                    <stringProp name="Argument.value">131072</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="receive.buffer.bytes" elementType="Argument">
                    <stringProp name="Argument.name">receive.buffer.bytes</stringProp>
                    <stringProp name="Argument.value">32768</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="security.protocol" elementType="Argument">
                    <stringProp name="Argument.name">security.protocol</stringProp>
                    <stringProp name="Argument.value">PLAINTEXT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="message.placeholder.key" elementType="Argument">
                    <stringProp name="Argument.name">message.placeholder.key</stringProp>
                    <stringProp name="Argument.value">MESSAGE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="kerberos.auth.enabled" elementType="Argument">
                    <stringProp name="Argument.name">kerberos.auth.enabled</stringProp>
                    <stringProp name="Argument.value">NO</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="java.security.auth.login.config" elementType="Argument">
                    <stringProp name="Argument.name">java.security.auth.login.config</stringProp>
                    <stringProp name="Argument.value">&lt;JAAS File Location&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="java.security.krb5.conf" elementType="Argument">
                    <stringProp name="Argument.name">java.security.krb5.conf</stringProp>
                    <stringProp name="Argument.value">&lt;krb5.conf location&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sasl.kerberos.service.name" elementType="Argument">
                    <stringProp name="Argument.name">sasl.kerberos.service.name</stringProp>
                    <stringProp name="Argument.value">kafka</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="classname">com.gslab.pepper.sampler.PepperBoxKafkaSampler</stringProp>
            </JavaSampler>
            <hashTree/>
            <com.gslab.pepper.config.plaintext.PlainTextConfigElement guiclass="TestBeanGUI" testclass="com.gslab.pepper.config.plaintext.PlainTextConfigElement" testname="Pepper-Box PlainText Config" enabled="true">
              <stringProp name="jsonSchema">{
	&quot;messageId&quot;:{{SEQUENCE(&quot;messageId&quot;, 1, 1)}},
	&quot;messageBody&quot;:&quot;{{RANDOM_ALPHA_NUMERIC(&quot;abcedefghijklmnopqrwxyzABCDEFGHIJKLMNOPQRWXYZ&quot;, 100)}}&quot;,
	&quot;messageCategory&quot;:&quot;{{RANDOM_STRING(&quot;Finance&quot;, &quot;Insurance&quot;, &quot;Healthcare&quot;, &quot;Shares&quot;)}}&quot;,
	&quot;messageStatus&quot;:&quot;{{RANDOM_STRING(&quot;Accepted&quot;,&quot;Pending&quot;,&quot;Processing&quot;,&quot;Rejected&quot;)}}&quot;,
	&quot;messageTime&quot;:{{TIMESTAMP()}}
}</stringProp>
              <stringProp name="placeHolder">MESSAGE</stringProp>
            </com.gslab.pepper.config.plaintext.PlainTextConfigElement>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group slir" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">500</stringProp>
        <stringProp name="ThreadGroup.ramp_time">500</stringProp>
        <longProp name="ThreadGroup.start_time">1504535466000</longProp>
        <longProp name="ThreadGroup.end_time">1504535466000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${testtime}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
          <stringProp name="CounterConfig.start">7990000000</stringProp>
          <stringProp name="CounterConfig.end">7999999999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">num</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
          <stringProp name="CounterConfig.start">117546000000002</stringProp>
          <stringProp name="CounterConfig.end">999999999999999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">num</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">79163089901</stringProp>
          <stringProp name="CounterConfig.end">79163089999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">num</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import org.apache.commons.codec.binary; 
//import java.util.zip.CRC16;

private static short sunCRC16( byte[] ba )
        {
        // create a new CRC-calculating object
        final CRC16 crc = new CRC16();
        // loop, calculating CRC for each byte of the string
        // There is no CRC16.update(byte[]) method.
        for ( byte b : ba )
            {
            crc.update( b );
            }
        // note use crc.value, not crc.getValue()
        return ( short ) crc.value;
        }

public static byte[] hexStringToByteArray(String s) {
    int len = s.length();
    byte[] data = new byte[len / 2];
    for (int i = 0; i &lt; len; i += 2) {
        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) &lt;&lt; 4)
                             + Character.digit(s.charAt(i+1), 16));
    }
    return data;
}

public byte[] hex2ByteArray( String hexString ) {
    String hexVal = &quot;0123456789ABCDEF&quot;;
    byte[] out = new byte[hexString.length() / 2];

    int n = hexString.length();

    for( int i = 0; i &lt; n; i += 2 ) {
        //make a bit representation in an int of the hex value 
        int hn = hexVal.indexOf( hexString.charAt( i ) );
        int ln = hexVal.indexOf( hexString.charAt( i + 1 ) );

        //now just shift the high order nibble and add them together
        out[i/2] = (byte)( ( hn &lt;&lt; 4 ) | ln );
    }

    return out;
}

public static String dec2Hex(int num)
{
    String hex = &quot;&quot;;

    while (num != 0)
    {
        if (num % 16 &lt; 10)
            hex = Integer.toString(num % 16) + hex;
        else
            hex = (char)((num % 16)+55) + hex;
        num = num / 16;
    }

    return hex;
}

public void (){
byte s[] = {
                0x00, 0x00, 0x6a, (byte)0xe8, 0x4f, (byte)0x93,
                0x24, 0x02, 0x01, 0x00, 0x01, 0x5c, 0x52, (byte)0xc4,
                0x5f, 0x00, 0x00, 0x16, 0x6a, (byte)0xe2, 0x35, 0x21,
                0x25, 0x69, (byte)0xa6, (byte)0x80, 0x07, 0x4c, 0x04, 0x07,
                0x00, 0x00, 0x24, 0x07, 0x00, 0x00, 0x00, 0x00 };

        int sasd = s.length;
        foo(s, s.length);
    }

    public void foo(byte[] arr, int size){

        long polynomial = 0x8408;
        long CRC = 0;

        for (byte b : arr)
        {
            CRC ^= b &amp; 0xff;
            for (int i = 8; i != 0; i--)
            {
                if ((CRC &amp; 0x0001) != 0)
                {
                    CRC = (CRC &gt;&gt; 1) ^ polynomial;
                }
                else
                {
                    CRC &gt;&gt;= 1;
                }
            }
        }

        System.out.println(Long.toHexString(CRC));
    }

public String crc16_eq(byte[] arr) {
//        byte[] arr = pucData.getBytes();
        long polynomial = 0x8408;
        long CRC = 0;

        for (byte b : arr)
        {
            CRC ^= b;
            for (int i = 8; i != 0; i--)
            {
                if ((CRC &amp; 0x0001) != 0)
                {
                    CRC = (CRC &gt;&gt; 1) ^ polynomial;
                }
                else
                {
                    CRC &gt;&gt;= 1;
                }
            }
        }
        log.info(CRC.toString());
		return Long.toHexString(CRC);
    }

//String hexString = vars.get(&quot;num&quot;); 
String hexString = &quot;00006AE84F932402&quot;;
String bytes =  hexString + &quot;0100015c52c78a0000166ae235212569a680074c04070000240700000000&quot;;
log.info(bytes);
//String bytes2 =  &quot;0100015c52c78a0000166ae235212569a680074c04070000240700000000&quot;;

String bytes3 = &quot;67&quot;;
byte[] bt2 =  hex2ByteArray(bytes3);
log.info(&quot;67: &quot; + crc16_eq(bt2).toString());

log.info(&quot;bytes: &quot; + crc16_eq(bytes.getBytes()).toString());


//byte[] bt2 = new BigInteger(&quot;67&quot;, 16).toByteArray();
//byte[] bt2 =  hex2ByteArray(bytes3);
//byte[] bt = hexStringToByteArray(bytes2);

//log.info(sunCRC16(bytes3.getBytes()).toString());
//log.info(sunCRC16(bt2).toString());
//log.info(sunCRC16(bt).toString());
	
//for ( byte b : bt2)
//{
//crc.update( b );
//}

//crc.value &amp;= 0xffff;

//String crcres = Integer.toHexString(crc.value);
String bytes_full = &quot;0026&quot; + bytes + crc16_eq(bytes.getBytes()).toString();

//log.info( &quot;crc.value &quot; + crc.value);
//log.info( &quot;bytes &quot; + bytes_full);
//vars.put(&quot;bytes&quot;,bytes_full); 

//String hexString = vars.get(&quot;num&quot;); 

//String hexString = Hex.encodeHexString(hexString.getBytes(&quot;UTF-8&quot;));

//String t = hex(vars.get(&quot;num&quot;).getBytes(&quot;UTF-8&quot;))
//String hexString = &quot;0x6AE84F932402&quot;
//log.info(&quot;Hello&quot;);
//CRC16 crc = new CRC16();
//cnt = 1
//crc.update(cnt);

//log.info(crc.getValue());

//String t = new Sring();
//Hex.encodeHex(hexString.toCharArray()).toString()
//byte[] bytes = Hex.encodeHex(hexString.toCharArray()); // decode it from hex
//try
//{
//	vars.put(&quot;hexnum&quot;,	org.apache.commons.codec.binary.Hex.encodeHex(hexString.toCharArray()).toString() )
	//byte[] bytes = Hex.encodeHex(hexString.toCharArray()); // decode it from hex
	//	vars.put(&quot;hexnum&quot;, (new String(bytes, &quot;UTF-8&quot;))); // save result to a new variable called &quot;myHexString&quot;
//}
//catch(Exception e)
//{
//    log.info(&quot;Cannot parse &quot; + hexString + &quot; as hex e: &quot; + e);
//}


//String f = Integer.toHexString(vars.get(&quot;num&quot;)) 
vars.put(&quot;bytes&quot;, bytes_full);
//log.warn(vars.get(&quot;num&quot;));
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
          <stringProp name="SwitchController.value">${service}</stringProp>
        </SwitchController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="gmlc" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">gmlcgwuser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="syncmode" elementType="Argument">
                  <stringProp name="Argument.name">syncmode</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request 0" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;slir ver=&quot;3.2.0&quot; res_type=&quot;SYNC&quot;&gt;&lt;msid type=&quot;MSISDN&quot;&gt;79163089975&lt;/msid&gt;&lt;prio type=&quot;NORMAL&quot;/&gt;&lt;eqop&gt;&lt;max_loc_age&gt;60&lt;/max_loc_age&gt;&lt;/eqop&gt;&lt;/slir&gt;&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/slir</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49588">202</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
			&quot;sender&quot;: &quot;test1&quot;,&#xd;
			&quot;profile&quot;: &quot;poisk&quot;,&#xd;
			&quot;subscriberId&quot;: &quot;msisdn+${num}&quot;,&#xd;
			&quot;priority&quot;: 0,&#xd;
			&quot;age&quot;: 61,&#xd;
			&quot;sources&quot;: [ &quot;locations&quot;, &quot;cellid&quot; ],&#xd;
			&quot;inputs&quot;: [ 12432 ],&#xd;
			&quot;infolevel&quot;: 8191,&#xd;
			&quot;lang&quot;: &quot;en&quot;,&#xd;
			&quot;gmlcparam&quot;: { &quot;syncmode&quot;: ${syncmode}, &quot;loctype&quot;: 0, &quot;hor_acc&quot;: 100, &quot;hor_acc_qos_class&quot;: 1 }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/gmlcgw/rest/v0/mlp32/slis</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49588">202</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="gmlc_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isalive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="lbs" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">lbs2coorduser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;profile&quot;:&quot;poisk&quot;,&#xd;
   &quot;sender&quot;:&quot;sender&quot;,&#xd;
   &quot;translator&quot;:1,&#xd;
   &quot;inputs&quot;:[&#xd;
      {&#xd;
         &quot;input&quot;:16000,&#xd;
         &quot;value&quot;:{&#xd;
				&quot;cellid&quot;: 42085, &#xd;
				&quot;lac&quot;: 6105, &#xd;
				&quot;mcc&quot;: 250, &#xd;
				&quot;mnc&quot;: 1, &#xd;
				&quot;net_type&quot;: 2&#xd;
			}&#xd;
      }&#xd;
   ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/lbs2coordsvc/rest/v0/lbs/one</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="lbs_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">lbs2coorduser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isAlive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="mnp" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">mnpsvcuser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request list" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;sender&quot;: &quot;as faw&quot;,&#xd;
        &quot;profile&quot;: &quot;poisk&quot;,&#xd;
        &quot;msisdn&quot;: [&quot;${num}01&quot;,&quot;${num}02&quot;,&quot;${num}03&quot;,&quot;${num}04&quot;,&quot;${num}05&quot;,&quot;${num}06&quot;,&quot;${num}07&quot;,&quot;${num}08&quot;,&quot;${num}09&quot;,&quot;${num}10&quot;,&quot;${num}11&quot;,&quot;${num}12&quot;,&quot;${num}13&quot;,&quot;${num}14&quot;,&quot;${num}15&quot;,&quot;${num}16&quot;,&quot;${num}17&quot;,&quot;${num}18&quot;,&quot;${num}19&quot;,&quot;${num}20&quot;],&#xd;
        &quot;lang&quot;: &quot;en&quot;,&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">9003</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/mnpsvc/rest/v0/msisdn/list</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request one" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sender" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">asdf</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sender</stringProp>
                  </elementProp>
                  <elementProp name="profile" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">poisk</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">profile</stringProp>
                  </elementProp>
                  <elementProp name="msisdn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${num}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">msisdn</stringProp>
                  </elementProp>
                  <elementProp name="lang" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">en</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">lang</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/mnpsvc/rest/v0/msisdn/one</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="false">
              <stringProp name="dataSource">bdpn</stringProp>
              <stringProp name="query">select * from get_info_one(&apos;${num}01&apos;,&apos;en&apos;)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Postgres" enabled="true">
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="dataSource">bdpn</stringProp>
                <stringProp name="dbUrl">jdbc:postgresql://${host}:6543/mnp?autoReconnect=true</stringProp>
                <stringProp name="driver">org.postgresql.Driver</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="password">hahaha</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <stringProp name="username">mnp_bash</stringProp>
              </JDBCDataSource>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="mnp_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request one" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isalive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="obu_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request one" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isAlive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="obuts_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="obuts" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler" enabled="false">
              <stringProp name="TCPSampler.classname">BinaryTCPClientImpl</stringProp>
              <stringProp name="TCPSampler.server">${host}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">false</boolProp>
              <stringProp name="TCPSampler.port">${port}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout">10000</stringProp>
              <stringProp name="TCPSampler.ctimeout">10000</stringProp>
              <stringProp name="TCPSampler.request">00260000${hexnum}0100015c52c78a0000166ae235212569a680074c040700002407000000006782</stringProp>
              <boolProp name="TCPSampler.closeConnection">false</boolProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="474552740">0002640113bc</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable"></stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler" enabled="true">
              <stringProp name="TCPSampler.classname">BinaryTCPClientImpl</stringProp>
              <stringProp name="TCPSampler.server">${host}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">false</boolProp>
              <stringProp name="TCPSampler.port">${port}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout">10000</stringProp>
              <stringProp name="TCPSampler.ctimeout">10000</stringProp>
              <stringProp name="TCPSampler.request">${bytes}</stringProp>
              <boolProp name="TCPSampler.closeConnection">false</boolProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="474552740">0002640113bc</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable"></stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="kafka" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java Request" enabled="true">
              <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="bootstrap.servers" elementType="Argument">
                    <stringProp name="Argument.name">bootstrap.servers</stringProp>
                    <stringProp name="Argument.value">10.97.51.36:9092</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="zookeeper.servers" elementType="Argument">
                    <stringProp name="Argument.name">zookeeper.servers</stringProp>
                    <stringProp name="Argument.value">&lt;Zookeeper List&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="kafka.topic.name" elementType="Argument">
                    <stringProp name="Argument.name">kafka.topic.name</stringProp>
                    <stringProp name="Argument.value">testing</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="key.serializer" elementType="Argument">
                    <stringProp name="Argument.name">key.serializer</stringProp>
                    <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="value.serializer" elementType="Argument">
                    <stringProp name="Argument.name">value.serializer</stringProp>
                    <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="compression.type" elementType="Argument">
                    <stringProp name="Argument.name">compression.type</stringProp>
                    <stringProp name="Argument.value">none</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="batch.size" elementType="Argument">
                    <stringProp name="Argument.name">batch.size</stringProp>
                    <stringProp name="Argument.value">16384</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="linger.ms" elementType="Argument">
                    <stringProp name="Argument.name">linger.ms</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="buffer.memory" elementType="Argument">
                    <stringProp name="Argument.name">buffer.memory</stringProp>
                    <stringProp name="Argument.value">33554432</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="acks" elementType="Argument">
                    <stringProp name="Argument.name">acks</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="send.buffer.bytes" elementType="Argument">
                    <stringProp name="Argument.name">send.buffer.bytes</stringProp>
                    <stringProp name="Argument.value">131072</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="receive.buffer.bytes" elementType="Argument">
                    <stringProp name="Argument.name">receive.buffer.bytes</stringProp>
                    <stringProp name="Argument.value">32768</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="security.protocol" elementType="Argument">
                    <stringProp name="Argument.name">security.protocol</stringProp>
                    <stringProp name="Argument.value">PLAINTEXT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="message.placeholder.key" elementType="Argument">
                    <stringProp name="Argument.name">message.placeholder.key</stringProp>
                    <stringProp name="Argument.value">MESSAGE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="kerberos.auth.enabled" elementType="Argument">
                    <stringProp name="Argument.name">kerberos.auth.enabled</stringProp>
                    <stringProp name="Argument.value">NO</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="java.security.auth.login.config" elementType="Argument">
                    <stringProp name="Argument.name">java.security.auth.login.config</stringProp>
                    <stringProp name="Argument.value">&lt;JAAS File Location&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="java.security.krb5.conf" elementType="Argument">
                    <stringProp name="Argument.name">java.security.krb5.conf</stringProp>
                    <stringProp name="Argument.value">&lt;krb5.conf location&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sasl.kerberos.service.name" elementType="Argument">
                    <stringProp name="Argument.name">sasl.kerberos.service.name</stringProp>
                    <stringProp name="Argument.value">kafka</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="classname">com.gslab.pepper.sampler.PepperBoxKafkaSampler</stringProp>
            </JavaSampler>
            <hashTree/>
            <com.gslab.pepper.config.plaintext.PlainTextConfigElement guiclass="TestBeanGUI" testclass="com.gslab.pepper.config.plaintext.PlainTextConfigElement" testname="Pepper-Box PlainText Config" enabled="true">
              <stringProp name="jsonSchema">{
	&quot;messageId&quot;:{{SEQUENCE(&quot;messageId&quot;, 1, 1)}},
	&quot;messageBody&quot;:&quot;{{RANDOM_ALPHA_NUMERIC(&quot;abcedefghijklmnopqrwxyzABCDEFGHIJKLMNOPQRWXYZ&quot;, 100)}}&quot;,
	&quot;messageCategory&quot;:&quot;{{RANDOM_STRING(&quot;Finance&quot;, &quot;Insurance&quot;, &quot;Healthcare&quot;, &quot;Shares&quot;)}}&quot;,
	&quot;messageStatus&quot;:&quot;{{RANDOM_STRING(&quot;Accepted&quot;,&quot;Pending&quot;,&quot;Processing&quot;,&quot;Rejected&quot;)}}&quot;,
	&quot;messageTime&quot;:{{TIMESTAMP()}}
}</stringProp>
              <stringProp name="placeHolder">MESSAGE</stringProp>
            </com.gslab.pepper.config.plaintext.PlainTextConfigElement>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group isAlive" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <longProp name="ThreadGroup.start_time">1504535466000</longProp>
        <longProp name="ThreadGroup.end_time">1504535466000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${testtime}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
          <stringProp name="CounterConfig.start">7990000000</stringProp>
          <stringProp name="CounterConfig.end">7999999999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">num</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
          <stringProp name="CounterConfig.start">117546000000002</stringProp>
          <stringProp name="CounterConfig.end">999999999999999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">num</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">600000000001</stringProp>
          <stringProp name="CounterConfig.end">899999999999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">num</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import org.apache.commons.codec.binary; 
//import java.util.zip.CRC16;

private static short sunCRC16( byte[] ba )
        {
        // create a new CRC-calculating object
        final CRC16 crc = new CRC16();
        // loop, calculating CRC for each byte of the string
        // There is no CRC16.update(byte[]) method.
        for ( byte b : ba )
            {
            crc.update( b );
            }
        // note use crc.value, not crc.getValue()
        return ( short ) crc.value;
        }

public static byte[] hexStringToByteArray(String s) {
    int len = s.length();
    byte[] data = new byte[len / 2];
    for (int i = 0; i &lt; len; i += 2) {
        data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) &lt;&lt; 4)
                             + Character.digit(s.charAt(i+1), 16));
    }
    return data;
}

public byte[] hex2ByteArray( String hexString ) {
    String hexVal = &quot;0123456789ABCDEF&quot;;
    byte[] out = new byte[hexString.length() / 2];

    int n = hexString.length();

    for( int i = 0; i &lt; n; i += 2 ) {
        //make a bit representation in an int of the hex value 
        int hn = hexVal.indexOf( hexString.charAt( i ) );
        int ln = hexVal.indexOf( hexString.charAt( i + 1 ) );

        //now just shift the high order nibble and add them together
        out[i/2] = (byte)( ( hn &lt;&lt; 4 ) | ln );
    }

    return out;
}

public static String dec2Hex(int num)
{
    String hex = &quot;&quot;;

    while (num != 0)
    {
        if (num % 16 &lt; 10)
            hex = Integer.toString(num % 16) + hex;
        else
            hex = (char)((num % 16)+55) + hex;
        num = num / 16;
    }

    return hex;
}

public void (){
byte s[] = {
                0x00, 0x00, 0x6a, (byte)0xe8, 0x4f, (byte)0x93,
                0x24, 0x02, 0x01, 0x00, 0x01, 0x5c, 0x52, (byte)0xc4,
                0x5f, 0x00, 0x00, 0x16, 0x6a, (byte)0xe2, 0x35, 0x21,
                0x25, 0x69, (byte)0xa6, (byte)0x80, 0x07, 0x4c, 0x04, 0x07,
                0x00, 0x00, 0x24, 0x07, 0x00, 0x00, 0x00, 0x00 };

        int sasd = s.length;
        foo(s, s.length);
    }

    public void foo(byte[] arr, int size){

        long polynomial = 0x8408;
        long CRC = 0;

        for (byte b : arr)
        {
            CRC ^= b &amp; 0xff;
            for (int i = 8; i != 0; i--)
            {
                if ((CRC &amp; 0x0001) != 0)
                {
                    CRC = (CRC &gt;&gt; 1) ^ polynomial;
                }
                else
                {
                    CRC &gt;&gt;= 1;
                }
            }
        }

        System.out.println(Long.toHexString(CRC));
    }

public String crc16_eq(byte[] arr) {
//        byte[] arr = pucData.getBytes();
        long polynomial = 0x8408;
        long CRC = 0;

        for (byte b : arr)
        {
            CRC ^= b;
            for (int i = 8; i != 0; i--)
            {
                if ((CRC &amp; 0x0001) != 0)
                {
                    CRC = (CRC &gt;&gt; 1) ^ polynomial;
                }
                else
                {
                    CRC &gt;&gt;= 1;
                }
            }
        }
        log.info(CRC.toString());
		return Long.toHexString(CRC);
    }

//String hexString = vars.get(&quot;num&quot;); 
String hexString = &quot;00006AE84F932402&quot;;
String bytes =  hexString + &quot;0100015c52c78a0000166ae235212569a680074c04070000240700000000&quot;;
log.info(bytes);
//String bytes2 =  &quot;0100015c52c78a0000166ae235212569a680074c04070000240700000000&quot;;

String bytes3 = &quot;67&quot;;
byte[] bt2 =  hex2ByteArray(bytes3);
log.info(&quot;67: &quot; + crc16_eq(bt2).toString());

log.info(&quot;bytes: &quot; + crc16_eq(bytes.getBytes()).toString());


//byte[] bt2 = new BigInteger(&quot;67&quot;, 16).toByteArray();
//byte[] bt2 =  hex2ByteArray(bytes3);
//byte[] bt = hexStringToByteArray(bytes2);

//log.info(sunCRC16(bytes3.getBytes()).toString());
//log.info(sunCRC16(bt2).toString());
//log.info(sunCRC16(bt).toString());
	
//for ( byte b : bt2)
//{
//crc.update( b );
//}

//crc.value &amp;= 0xffff;

//String crcres = Integer.toHexString(crc.value);
String bytes_full = &quot;0026&quot; + bytes + crc16_eq(bytes.getBytes()).toString();

//log.info( &quot;crc.value &quot; + crc.value);
//log.info( &quot;bytes &quot; + bytes_full);
//vars.put(&quot;bytes&quot;,bytes_full); 

//String hexString = vars.get(&quot;num&quot;); 

//String hexString = Hex.encodeHexString(hexString.getBytes(&quot;UTF-8&quot;));

//String t = hex(vars.get(&quot;num&quot;).getBytes(&quot;UTF-8&quot;))
//String hexString = &quot;0x6AE84F932402&quot;
//log.info(&quot;Hello&quot;);
//CRC16 crc = new CRC16();
//cnt = 1
//crc.update(cnt);

//log.info(crc.getValue());

//String t = new Sring();
//Hex.encodeHex(hexString.toCharArray()).toString()
//byte[] bytes = Hex.encodeHex(hexString.toCharArray()); // decode it from hex
//try
//{
//	vars.put(&quot;hexnum&quot;,	org.apache.commons.codec.binary.Hex.encodeHex(hexString.toCharArray()).toString() )
	//byte[] bytes = Hex.encodeHex(hexString.toCharArray()); // decode it from hex
	//	vars.put(&quot;hexnum&quot;, (new String(bytes, &quot;UTF-8&quot;))); // save result to a new variable called &quot;myHexString&quot;
//}
//catch(Exception e)
//{
//    log.info(&quot;Cannot parse &quot; + hexString + &quot; as hex e: &quot; + e);
//}


//String f = Integer.toHexString(vars.get(&quot;num&quot;)) 
vars.put(&quot;bytes&quot;, bytes_full);
//log.warn(vars.get(&quot;num&quot;));
</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
          <stringProp name="SwitchController.value">gmlc</stringProp>
        </SwitchController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="gmlc2" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">gmlcgwuser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="syncmode" elementType="Argument">
                  <stringProp name="Argument.name">syncmode</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;sender&quot;:&quot;nip-sodmtd-server&quot;,&#xd;
   &quot;profile&quot;:&quot;poisk&quot;,&#xd;
   &quot;subscriberId&quot;:&quot;msisdn+${num}&quot;,&#xd;
   &quot;priority&quot;:0,&#xd;
   &quot;age&quot;:60,&#xd;
   &quot;sources&quot;:[&#xd;
      &quot;locations&quot;&#xd;
   ],&#xd;
   &quot;inputs&quot;:[&#xd;
      8192,&#xd;
      8193,&#xd;
      8194,&#xd;
      8195,&#xd;
      12432,&#xd;
      12433,&#xd;
      12434,&#xd;
      16000,&#xd;
      16001,&#xd;
      16002,&#xd;
      16384,&#xd;
      16640&#xd;
   ],&#xd;
   &quot;infolevel&quot;:5121,&#xd;
   &quot;lang&quot;:&quot;en&quot;,&#xd;
   &quot;gmlcparam&quot;:{&#xd;
      &quot;syncmode&quot;:2,&#xd;
      &quot;loctype&quot;:null,&#xd;
      &quot;hor_acc&quot;:null,&#xd;
      &quot;hor_acc_qos_class&quot;:null&#xd;
   }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/gmlcgw/rest/v0/mlp32/slis</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
			&quot;sender&quot;: &quot;test1&quot;,&#xd;
			&quot;profile&quot;: &quot;poisk&quot;,&#xd;
			&quot;subscriberId&quot;: &quot;msisdn+${num}&quot;,&#xd;
			&quot;priority&quot;: 0,&#xd;
			&quot;age&quot;: 61,&#xd;
			&quot;sources&quot;: [ &quot;locations&quot;, &quot;cellid&quot; ],&#xd;
			&quot;inputs&quot;: [ 12432 ],&#xd;
			&quot;infolevel&quot;: 8191,&#xd;
			&quot;lang&quot;: &quot;en&quot;,&#xd;
			&quot;gmlcparam&quot;: { &quot;syncmode&quot;: ${syncmode}, &quot;loctype&quot;: 0, &quot;hor_acc&quot;: 100, &quot;hor_acc_qos_class&quot;: 1 }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/gmlcgw/rest/v0/mlp32/slis</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49588">202</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="gmlc_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isalive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="lbs" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">lbs2coorduser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
   &quot;profile&quot;:&quot;poisk&quot;,&#xd;
   &quot;sender&quot;:&quot;sender&quot;,&#xd;
   &quot;translator&quot;:1,&#xd;
   &quot;inputs&quot;:[&#xd;
      {&#xd;
         &quot;input&quot;:16000,&#xd;
         &quot;value&quot;:{&#xd;
				&quot;cellid&quot;: 42085, &#xd;
				&quot;lac&quot;: 6105, &#xd;
				&quot;mcc&quot;: 250, &#xd;
				&quot;mnc&quot;: 1, &#xd;
				&quot;net_type&quot;: 2&#xd;
			}&#xd;
      }&#xd;
   ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/lbs2coordsvc/rest/v0/lbs/one</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="gmlc" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="false">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">lbs2coorduser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request isalive" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isAlive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="false">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="mnp" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
              <collectionProp name="AuthManager.auth_list">
                <elementProp name="" elementType="Authorization">
                  <stringProp name="Authorization.url"></stringProp>
                  <stringProp name="Authorization.username">mnpsvcuser1</stringProp>
                  <stringProp name="Authorization.password">test123</stringProp>
                  <stringProp name="Authorization.domain"></stringProp>
                  <stringProp name="Authorization.realm"></stringProp>
                </elementProp>
              </collectionProp>
            </AuthManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request list" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;sender&quot;: &quot;as faw&quot;,&#xd;
        &quot;profile&quot;: &quot;poisk&quot;,&#xd;
        &quot;msisdn&quot;: [&quot;${num}01&quot;,&quot;${num}02&quot;,&quot;${num}03&quot;,&quot;${num}04&quot;,&quot;${num}05&quot;,&quot;${num}06&quot;,&quot;${num}07&quot;,&quot;${num}08&quot;,&quot;${num}09&quot;,&quot;${num}10&quot;,&quot;${num}11&quot;,&quot;${num}12&quot;,&quot;${num}13&quot;,&quot;${num}14&quot;,&quot;${num}15&quot;,&quot;${num}16&quot;,&quot;${num}17&quot;,&quot;${num}18&quot;,&quot;${num}19&quot;,&quot;${num}20&quot;],&#xd;
        &quot;lang&quot;: &quot;en&quot;,&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">9003</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/mnpsvc/rest/v0/msisdn/list</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request one" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sender" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">asdf</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sender</stringProp>
                  </elementProp>
                  <elementProp name="profile" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">poisk</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">profile</stringProp>
                  </elementProp>
                  <elementProp name="msisdn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${num}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">msisdn</stringProp>
                  </elementProp>
                  <elementProp name="lang" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">en</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">lang</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/mnpsvc/rest/v0/msisdn/one</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
                <stringProp name="DurationAssertion.duration">500</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="false">
              <stringProp name="dataSource">bdpn</stringProp>
              <stringProp name="query">select * from get_info_one(&apos;${num}01&apos;,&apos;en&apos;)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Postgres" enabled="true">
                <boolProp name="autocommit">true</boolProp>
                <stringProp name="checkQuery">Select 1</stringProp>
                <stringProp name="connectionAge">5000</stringProp>
                <stringProp name="dataSource">bdpn</stringProp>
                <stringProp name="dbUrl">jdbc:postgresql://${host}:6543/mnp?autoReconnect=true</stringProp>
                <stringProp name="driver">org.postgresql.Driver</stringProp>
                <boolProp name="keepAlive">true</boolProp>
                <stringProp name="password">hahaha</stringProp>
                <stringProp name="poolMax">10</stringProp>
                <stringProp name="timeout">10000</stringProp>
                <stringProp name="transactionIsolation">DEFAULT</stringProp>
                <stringProp name="trimInterval">60000</stringProp>
                <stringProp name="username">mnp_bash</stringProp>
              </JDBCDataSource>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="mnp_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request one" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isalive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="obu_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request one" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/isAlive.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="obuts_isalive" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="obuts" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler" enabled="false">
              <stringProp name="TCPSampler.classname">BinaryTCPClientImpl</stringProp>
              <stringProp name="TCPSampler.server">${host}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">false</boolProp>
              <stringProp name="TCPSampler.port">${port}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout">10000</stringProp>
              <stringProp name="TCPSampler.ctimeout">10000</stringProp>
              <stringProp name="TCPSampler.request">00260000${hexnum}0100015c52c78a0000166ae235212569a680074c040700002407000000006782</stringProp>
              <boolProp name="TCPSampler.closeConnection">false</boolProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="474552740">0002640113bc</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable"></stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler" enabled="true">
              <stringProp name="TCPSampler.classname">BinaryTCPClientImpl</stringProp>
              <stringProp name="TCPSampler.server">${host}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">false</boolProp>
              <stringProp name="TCPSampler.port">${port}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout">10000</stringProp>
              <stringProp name="TCPSampler.ctimeout">10000</stringProp>
              <stringProp name="TCPSampler.request">${bytes}</stringProp>
              <boolProp name="TCPSampler.closeConnection">false</boolProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="474552740">0002640113bc</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Scope.variable"></stringProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="kafka" enabled="true">
            <boolProp name="TransactionController.parent">false</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java Request" enabled="true">
              <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="bootstrap.servers" elementType="Argument">
                    <stringProp name="Argument.name">bootstrap.servers</stringProp>
                    <stringProp name="Argument.value">10.97.51.36:9092</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="zookeeper.servers" elementType="Argument">
                    <stringProp name="Argument.name">zookeeper.servers</stringProp>
                    <stringProp name="Argument.value">&lt;Zookeeper List&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="kafka.topic.name" elementType="Argument">
                    <stringProp name="Argument.name">kafka.topic.name</stringProp>
                    <stringProp name="Argument.value">testing</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="key.serializer" elementType="Argument">
                    <stringProp name="Argument.name">key.serializer</stringProp>
                    <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="value.serializer" elementType="Argument">
                    <stringProp name="Argument.name">value.serializer</stringProp>
                    <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="compression.type" elementType="Argument">
                    <stringProp name="Argument.name">compression.type</stringProp>
                    <stringProp name="Argument.value">none</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="batch.size" elementType="Argument">
                    <stringProp name="Argument.name">batch.size</stringProp>
                    <stringProp name="Argument.value">16384</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="linger.ms" elementType="Argument">
                    <stringProp name="Argument.name">linger.ms</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="buffer.memory" elementType="Argument">
                    <stringProp name="Argument.name">buffer.memory</stringProp>
                    <stringProp name="Argument.value">33554432</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="acks" elementType="Argument">
                    <stringProp name="Argument.name">acks</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="send.buffer.bytes" elementType="Argument">
                    <stringProp name="Argument.name">send.buffer.bytes</stringProp>
                    <stringProp name="Argument.value">131072</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="receive.buffer.bytes" elementType="Argument">
                    <stringProp name="Argument.name">receive.buffer.bytes</stringProp>
                    <stringProp name="Argument.value">32768</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="security.protocol" elementType="Argument">
                    <stringProp name="Argument.name">security.protocol</stringProp>
                    <stringProp name="Argument.value">PLAINTEXT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="message.placeholder.key" elementType="Argument">
                    <stringProp name="Argument.name">message.placeholder.key</stringProp>
                    <stringProp name="Argument.value">MESSAGE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="kerberos.auth.enabled" elementType="Argument">
                    <stringProp name="Argument.name">kerberos.auth.enabled</stringProp>
                    <stringProp name="Argument.value">NO</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="java.security.auth.login.config" elementType="Argument">
                    <stringProp name="Argument.name">java.security.auth.login.config</stringProp>
                    <stringProp name="Argument.value">&lt;JAAS File Location&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="java.security.krb5.conf" elementType="Argument">
                    <stringProp name="Argument.name">java.security.krb5.conf</stringProp>
                    <stringProp name="Argument.value">&lt;krb5.conf location&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sasl.kerberos.service.name" elementType="Argument">
                    <stringProp name="Argument.name">sasl.kerberos.service.name</stringProp>
                    <stringProp name="Argument.value">kafka</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="classname">com.gslab.pepper.sampler.PepperBoxKafkaSampler</stringProp>
            </JavaSampler>
            <hashTree/>
            <com.gslab.pepper.config.plaintext.PlainTextConfigElement guiclass="TestBeanGUI" testclass="com.gslab.pepper.config.plaintext.PlainTextConfigElement" testname="Pepper-Box PlainText Config" enabled="true">
              <stringProp name="jsonSchema">{
	&quot;messageId&quot;:{{SEQUENCE(&quot;messageId&quot;, 1, 1)}},
	&quot;messageBody&quot;:&quot;{{RANDOM_ALPHA_NUMERIC(&quot;abcedefghijklmnopqrwxyzABCDEFGHIJKLMNOPQRWXYZ&quot;, 100)}}&quot;,
	&quot;messageCategory&quot;:&quot;{{RANDOM_STRING(&quot;Finance&quot;, &quot;Insurance&quot;, &quot;Healthcare&quot;, &quot;Shares&quot;)}}&quot;,
	&quot;messageStatus&quot;:&quot;{{RANDOM_STRING(&quot;Accepted&quot;,&quot;Pending&quot;,&quot;Processing&quot;,&quot;Rejected&quot;)}}&quot;,
	&quot;messageTime&quot;:{{TIMESTAMP()}}
}</stringProp>
              <stringProp name="placeHolder">MESSAGE</stringProp>
            </com.gslab.pepper.config.plaintext.PlainTextConfigElement>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TransactionsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Transactions per Second" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${path}/${logprefix}_results.csv</stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc - PerfMon Metrics Collector" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${path}/${logprefix}_results.csv</stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <collectionProp name="metricConnections">
          <collectionProp name="-1441056435">
            <stringProp name="1211246942">${host}</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="66952">CPU</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="553196540">
            <stringProp name="1211246942">${host}</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="-1993889503">Memory</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="-1852761505">
            <stringProp name="1211246942">${host}</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="2112896831">Disks I/O</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="665536556">
            <stringProp name="1211246942">${host}</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="-274342153">Network I/O</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="1212729831">
            <stringProp name="1211246942">${host}</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="2590131">Swap</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
        </collectionProp>
      </kg.apc.jmeter.perfmon.PerfMonCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${path}/${logprefix}_results.csv</stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${path}/${logprefix}_results.csv</stringProp>
        <longProp name="interval_grouping">100</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CompositeResultCollector guiclass="kg.apc.jmeter.vizualizers.CompositeGraphGui" testclass="kg.apc.jmeter.vizualizers.CompositeResultCollector" testname="jp@gc - Composite Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
        <collectionProp name="COMPOSITE_CFG">
          <collectionProp name=""/>
          <collectionProp name=""/>
        </collectionProp>
      </kg.apc.jmeter.vizualizers.CompositeResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="false">
        <stringProp name="FileSaver.filename">${path}/${logprefix}_errors_data.log</stringProp>
        <boolProp name="FileSaver.errorsonly">true</boolProp>
        <boolProp name="FileSaver.skipautonumber">false</boolProp>
        <boolProp name="FileSaver.skipsuffix">false</boolProp>
        <boolProp name="FileSaver.successonly">false</boolProp>
        <boolProp name="FileSaver.addTimstamp">true</boolProp>
      </ResultSaver>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${__P(path,/var/log)}/${logprefix}_errors.log</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultSaver guiclass="ResultSaverGui" testclass="ResultSaver" testname="Save Responses to a file" enabled="false">
        <stringProp name="FileSaver.filename">${__P(path,/var/log)}/${logprefix}_error.log</stringProp>
        <boolProp name="FileSaver.errorsonly">true</boolProp>
        <boolProp name="FileSaver.skipautonumber">false</boolProp>
        <boolProp name="FileSaver.skipsuffix">false</boolProp>
        <boolProp name="FileSaver.successonly">false</boolProp>
        <boolProp name="FileSaver.addTimstamp">true</boolProp>
      </ResultSaver>
      <hashTree/>
      <kg.apc.jmeter.listener.GraphsGeneratorListener guiclass="TestBeanGUI" testclass="kg.apc.jmeter.listener.GraphsGeneratorListener" testname="jp@gc - Graphs Generator" enabled="false">
        <boolProp name="aggregateRows">false</boolProp>
        <boolProp name="autoScaleRows">false</boolProp>
        <stringProp name="endOffset"></stringProp>
        <stringProp name="excludeLabels"></stringProp>
        <boolProp name="excludeSamplesWithRegex">false</boolProp>
        <intProp name="exportMode">0</intProp>
        <stringProp name="filePrefix">${logprefix}_</stringProp>
        <stringProp name="forceY"></stringProp>
        <stringProp name="granulation">60000</stringProp>
        <intProp name="graphHeight">600</intProp>
        <intProp name="graphWidth">800</intProp>
        <stringProp name="includeLabels"></stringProp>
        <boolProp name="includeSamplesWithRegex">true</boolProp>
        <stringProp name="limitRows">150</stringProp>
        <stringProp name="lineWeight"></stringProp>
        <stringProp name="lowCountLimit"></stringProp>
        <stringProp name="outputBaseFolder">${path}</stringProp>
        <boolProp name="paintGradient">true</boolProp>
        <boolProp name="paintZeroing">true</boolProp>
        <boolProp name="preventOutliers">false</boolProp>
        <boolProp name="relativeTimes">false</boolProp>
        <stringProp name="resultsFileName">${path}/${logprefix}_results.csv</stringProp>
        <stringProp name="startOffset"></stringProp>
        <stringProp name="successFilter"></stringProp>
        <stringProp name="paintMarkers">True</stringProp>
      </kg.apc.jmeter.listener.GraphsGeneratorListener>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
